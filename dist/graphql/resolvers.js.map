{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["resolvers","Query","users","_","ctx","isAuth","Error","User","find","user","_id","findById","Mutation","createUser","input","exists","bcrypt","hash","password","newUser","save","deleteUser","findByIdAndDelete","updateUser","findByIdAndUpdate","login","email","findOne","status","compare","isEqual","token","jwt","sign","userId","id","process","env","JWT_KEY","expiresIn"],"mappings":"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","sourcesContent":["import User from \"../models/User\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n\r\nexport const resolvers = {\r\n    Query: {\r\n        users(_,{},ctx) {\r\n            if (!ctx.isAuth){\r\n                throw new Error('Unautheticated!');\r\n            }\r\n            return User.find();\r\n        },\r\n        user(_,{_id},ctx){\r\n            return ctx.isAuth ? User.findById(_id) : new Error('Unautheticated')\r\n        }\r\n    },\r\n    Mutation: {\r\n        async createUser(_, {input}) {\r\n\r\n            User.exists()\r\n\r\n            input.password = await bcrypt.hash(input.password, 12);\r\n\r\n            const newUser = new User(input);\r\n            await newUser.save();\r\n            newUser.password = null;\r\n            return newUser;\r\n        },\r\n\r\n        deleteUser(_, {_id}, ctx) {\r\n            return ctx.isAuth ? User.findByIdAndDelete(_id) : new Error('Unautheticated!');;\r\n        },\r\n\r\n        updateUser(_, {_id, input}, ctx) {\r\n            return ctx.isAuth ? User.findByIdAndUpdate(_id, input, {new: true}) : new Error('Unautheticated');\r\n        },\r\n\r\n        async login(_, {email,password}){\r\n\r\n            const user = await User.findOne({email:email});\r\n\r\n            if (!user){\r\n                throw new Error('Invalid Credentials!');\r\n            }\r\n\r\n            if (user.status === 'Pending'){\r\n                return new Error('Pending Account. Please Verify Your Email!')\r\n            }\r\n\r\n            const isEqual = await bcrypt.compare(password,user.password);\r\n\r\n            if (!isEqual){\r\n                throw new Error('Invalid Credentials!');\r\n            }\r\n\r\n\r\n            const token = jwt.sign({userId: user.id, email:user.email}, process.env.JWT_KEY, {\r\n                expiresIn: '1h'\r\n            });\r\n\r\n            return {userId : user.id, token: token}\r\n        }\r\n    }\r\n};"],"file":"resolvers.js"}